import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

export function abbreviateNumber(number: number) {
  if (number < 1000) {
    // If so, return the number as is.
    return number;
  } else {
    // Otherwise, get the tier of the number.
    var tier = Math.floor(Math.log10(number) / 3);

    // Get the suffix for the tier.
    var suffixes = ["", "k", "M", "B", "T"];

    // Round the number to the nearest decimal place.
    var roundedNumber = Math.ceil(number / Math.pow(10, tier * 3));

    // If the rounded number is less than 1, remove the decimal point.
    if (roundedNumber < 1) {
      roundedNumber = Math.floor(roundedNumber);
    }

    // Return the number with the suffix.
    return roundedNumber + suffixes[tier];
  }
}
